import math
import numpy as np

#constraints x >= 0, y >= 0 and x + y^2 <= 2.

def solve_problem():
    k=0
    x_curr=np.asarray([0.,0.])
    accuracy=0.5

    A=np.asarray([[0.25,0],[0,1]])
    while True:
        k+=1
        if x_curr[0]>0 and x_curr[1]>0 and x_curr[0]+x_curr[1]**2<=2:
            print "step", k, "Case 1"
            g_k=np.asarray([1./x_curr[0],1./x_curr[1]])
        elif max(-x_curr[0], -x_curr[1],x_curr[0]+x_curr[1]**2-2)==-x_curr[0]:
            print "step", k, "Case 2"
            g_k=np.asarray([-1.,0.])
        elif max(-x_curr[0], -x_curr[1],x_curr[0]+x_curr[1]**2-2)==-x_curr[1]:
            print "step", k, "Case 3"
            g_k=np.asarray([0.,-1.])
        else:
            print "step", k, "Case 4"
            g_k=np.asarray([1.,2*x_curr[1]])

        eta = np.sqrt(g_k.dot(A.dot(g_k)))

        if x_curr[0]>0 and x_curr[1]>0 and x_curr[0]+x_curr[1]**2<=2 and eta<=accuracy:
            return x_curr
        elif (x_curr[0]+eta<=0 or x_curr[1]+eta<=0) or x_curr[0]+x_curr[1]**2-eta>2:
            return "INFEASIBLE"
        else:
            x_curr_0 = x_curr[0] - (1./3.)*(A.dot(g_k)[0]/float(eta))
            x_curr_1 = x_curr[1] - (1./3.)*(A.dot(g_k)[1]/float(eta))
            A_new = (4./3.)*(A-(2./3.)*(A.dot(g_k.dot(g_k.dot(A)))/g_k.dot(A.dot(g_k))))
            x_curr[0]=x_curr_0
            x_curr[1]=x_curr_1
            A = A_new
            print "new x_curr=", x_curr
            print "new A=", A

print solve_problem()
#ellipsoid_initial: x^2 / 4 + y^2 / 1 <= 1
#goal: (x,y) = (4/3, sqrt(1/3))
